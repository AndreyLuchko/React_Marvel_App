{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/errorBoundary/ErrorBoundary.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"names":["ErrorMessage","style","margin","display","width","height","objectFit","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","getCharacterByName","name","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComics","_transformComics","getComic","comic","title","pageCount","price","prices","language","textObjects","ErrorBoundary","state","errorInfo","console","log","this","setState","props","children","Component","AppBanner","className","avengers","avengersLogo","ComicsList","comicList","setComicList","newItemLoading","setNewItemLoading","setOffset","comicEnded","setComicEnded","useEffect","onRequest","initial","then","onComicListLoaded","newComicList","ended","length","arr","elements","item","to","renderItem","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","content"],"mappings":"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","file":"static/js/6.89d9e9b8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} /> // if error.gif in 'public' folder\r\n\r\n        <img style={{margin: '0 auto', display: 'block', width: \"250px\", height: \"250px\", objectFit: \"contain\"}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=bd2a11bd92ac1548e8b8a93b5000d171';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return  res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || \"There is no description\",\r\n            pageCount: comic.pageCount\r\n\t\t\t\t? `${comic.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'NOT AVAILABLE',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n            homepage: comic.urls[0].url,\r\n        }\r\n    }\r\n    return  {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback( async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n}","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // this method ONLY update State!!!\r\n    // static getDerivedStateFromError(error) {\r\n    //     return { error: true};\r\n    // }\r\n\r\n    // if need smth else use componentDidCatch()\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render () {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n\n\nconst ComicsList = () => {\n\n    const [comicList, setComicList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [comicEnded, setComicEnded] = useState(false);\n\n    const { loading, error, getAllComics } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ?  setNewItemLoading(false) : setNewItemLoading(true);\n       \n        getAllComics(offset)\n            .then(onComicListLoaded)\n    }\n\n    const onComicListLoaded = (newComicList) => {\n        let ended = false;\n        if (newComicList.length < 8) {\n            ended = true;\n        }\n\n        setComicList(comicList => [...comicList, ...newComicList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 8);\n        setComicEnded(comicEnded => ended);\n    }\n\n    function renderItem (arr) {\n\n        const elements = arr.map(item => {\n            const {id, title, thumbnail, price} = item;\n\n            return (\n                <li \n                    className=\"comics__item\"\n                    key={id}>\n                    <Link to={`/comics/${id}`}>\n                        <img src={thumbnail} alt={title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{title}</div>\n                        <div className=\"comics__item-price\">{price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {elements}\n            </ul>\n        )\n    }\n\n    const items = renderItem(comicList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"comics__list\">\n           {errorMessage}\n           {spinner}\n           {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ display: comicEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet, HelmetProvider } from 'react-helmet-async';\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n\r\n        <HelmetProvider>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"List of comics\"\r\n                />\r\n                <title>Comics Page</title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <ErrorBoundary>\r\n                <ComicsList />\r\n            </ErrorBoundary>\r\n        </HelmetProvider>\r\n\r\n    )\r\n}\r\n\r\nexport default ComicsPage;"],"sourceRoot":""}