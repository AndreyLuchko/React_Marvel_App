{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SinglePage.js"],"names":["ErrorMessage","style","margin","display","width","height","objectFit","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","getCharacterByName","name","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComics","_transformComics","getComic","comic","title","pageCount","price","prices","language","textObjects","AppBanner","className","avengers","avengersLogo","SinglePage","Component","dataType","useParams","setData","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","content"],"mappings":"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","file":"static/js/8.266f7a16.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} /> // if error.gif in 'public' folder\r\n\r\n        <img style={{margin: '0 auto', display: 'block', width: \"250px\", height: \"250px\", objectFit: \"contain\"}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=bd2a11bd92ac1548e8b8a93b5000d171';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return  res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || \"There is no description\",\r\n            pageCount: comic.pageCount\r\n\t\t\t\t? `${comic.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'NOT AVAILABLE',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n            homepage: comic.urls[0].url,\r\n        }\r\n    }\r\n    return  {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback( async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n    const { id } = useParams();\r\n    const [data, setData] = useState(null);\r\n    const { loading, error, getComic, getCharacter, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateData()\r\n    }, [id])\r\n\r\n    const updateData = () => {\r\n        clearError();\r\n\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComic(id).then(onDataLoaded);\r\n                break;\r\n            case 'character':\r\n                getCharacter(id).then(onDataLoaded);\r\n        }\r\n    }\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error || !data) ? <Component data={data} /> : null;\r\n\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SinglePage;"],"sourceRoot":""}