{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charFormItem/CharFormItem.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","margin","display","width","height","objectFit","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","getCharacterByName","name","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComics","_transformComics","getComic","comic","title","pageCount","price","prices","language","textObjects","ErrorBoundary","state","errorInfo","console","log","this","setState","props","children","Component","Veiw","className","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemsRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","elements","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","CharInfo","charId","skeleton","CharFormItem","character","setCharacter","to","initialValues","validationSchema","object","string","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/5.cd87bf6a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} /> // if error.gif in 'public' folder\r\n\r\n        <img style={{margin: '0 auto', display: 'block', width: \"250px\", height: \"250px\", objectFit: \"contain\"}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=bd2a11bd92ac1548e8b8a93b5000d171';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return  res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || \"There is no description\",\r\n            pageCount: comic.pageCount\r\n\t\t\t\t? `${comic.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'NOT AVAILABLE',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n            homepage: comic.urls[0].url,\r\n        }\r\n    }\r\n    return  {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback( async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n}","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // this method ONLY update State!!!\r\n    // static getDerivedStateFromError(error) {\r\n    //     return { error: true};\r\n    // }\r\n\r\n    // if need smth else use componentDidCatch()\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render () {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    \n    const [char, setChar] = useState({});\n  \n   const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <Veiw char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br />\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\">\n                        <div className=\"inner\" onClick={updateChar}>try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n                </div>\n            </div>\n        )\n}\n\nconst Veiw = ({ char }) => {\n    const { name, thumbnail, description, homepage, wiki } = char;\n    const path = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n    const style = thumbnail === path ? {objectFit: 'contain'} : null;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={style} alt=\"Random character\" className=\"randomchar__img\" />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = async (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemsRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemsRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemsRefs.current[id].classList.add('char__item_selected');\n        itemsRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n\n        const elements = arr.map((item, i) => {\n\n            const { id, name, thumbnail } = item;\n            const path = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n            const style = thumbnail === path ? { objectFit: 'unset' } : null;\n\n            return (\n                <CSSTransition\n                    key={id}\n                    timeout={500}\n                    classNames={'item'}\n                >\n                    <li\n                        className=\"char__item\"\n                        // key={id}\n                        tabIndex='0'\n                        ref={el => itemsRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(id);\n                            focusOnItem(i);\n                        }}\n                        onKeyDown={(e) => {\n                            if (e.key === 'Enter' || e.key === ' ') {\n                                props.onCharSelected(id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={thumbnail} alt={name} style={style} />\n                        <div className=\"char__name\">{name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {elements}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ display: charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n};\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) return;\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <Veiw char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst Veiw = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n    const path = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n    const style = thumbnail === path ? { objectFit: 'contain' } : null;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={style} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport { object, string } from 'yup';\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charformitem.scss';\r\n\r\nconst CharFormItem = () => {\r\n    const { getCharacterByName, clearError, loading, error } = useMarvelService();\r\n    const [character, setCharacter] = useState(null);\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(character => setCharacter(character))\r\n    }\r\n \r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n\r\n    const results = !character ? null : character.length > 0 ?\r\n\r\n        <div className=\"char__form-item\">\r\n            <div className=\"char__form-item-name\">There is! Visit {character[0].name} page?</div>\r\n            <Link to={`/characters/${character[0].id}`} className=\"button button__secondary\">\r\n                <div\r\n                    className=\"inner\">\r\n                        Page\r\n                </div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__form-item\">\r\n            The character was not found. Check the name and try again\r\n        </div>\r\n\r\n    return (\r\n        <div className=\"char__form\">\r\n            <Formik\r\n                initialValues={{\r\n                    name: ''\r\n                }}\r\n                validationSchema={\r\n                    object({\r\n                        name: string().required('This field is required')\r\n                    })}\r\n                onSubmit={\r\n                    ({ name }) => {\r\n                        updateChar(name)\r\n                    }}\r\n            >\r\n                <Form >\r\n                    <label htmlFor='name' className=\"char__form-label\">Or find a character by name:</label>\r\n                    <Field\r\n                        type=\"text\"\r\n                        name='name'\r\n                        className=\"char__form-input\"\r\n                        placeholder=\"Enter name\" />\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"button button__main\"\r\n                        disabled={loading}>\r\n                        <div className=\"inner\">Find</div>\r\n                    </button>\r\n\r\n                    <FormikErrorMessage  name=\"name\" component=\"div\" className=\"char__form-error\" />\r\n                </Form>\r\n\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharFormItem;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharFormItem from \"../charFormItem/CharFormItem\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <HelmetProvider>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharFormItem />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </HelmetProvider>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}